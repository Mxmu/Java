第一题：

实现一个单向链表，链表的每个节点包括整型数据域和下一个节点的引用，要求实现链表的建立（建立的链表必须有序，按数据域升序排列）、节点的插入、节点的删除、链表的遍历（打印）
要求：c++语言中我们一般用结构体类型的变量表示链表的每个结点，在java语言里，我们用类类型的变量，即对象来表示每个结点。因此，要求首先建立一个名为LinkNode的结点类，其中包括数据成员int data 和 LinkNode next，分别表示结点的数据域和链表中下一个结点的引用。写出该类的构造函数，以及public void DisplayLinkNode()成员函数，打印当前结点的数据域的值。
然后再写一个名为 LinkList的链表类，包括数据成员	LinkNode head，表示链表的头结点的引用，按下列给出的类的框架完善各个成员函数

public class LinkList{
	LinkNode head;
	public LinkList(){ //写出构造函数
		
	}
	void Sort_Create(){ /*有序插入法生成链表，从键盘输入若干无序的整数（输入-1表示输入结束），将输入的整数赋值给各个结点对象的data成员，并要求创建的链表的数据域的值是按升序排列的。每输入一个整数，就创建一个结点，并将该结点插入到已生成的有序链表的合适位置，保证插入后链表依然有序。插入结点时调用下面的成员函数void Insert(LinkNode n)*/
	
	}
	
	void Insert(LinkNode n){
		/*在链表中查找恰当的位置，将结点n插入到当前链表中，确保插入后链表依然有序。*/
		
	}
	
	void PrintList(){
		/*打印链表上各个结点的数据域的值*/
	}
	
	void Delete_one_node(int num){
		/*在当前链表中查找数据域的值为num的结点，将该结点删除*/
        }		
	
}

第二题：
编程完成以下功能：创建两个线程，每个线程打印出线程的名字后再睡眠，给其它线程以执行的机会，每个线程前后共睡眠5次。线程退出前打印提示信息：说明该线程即将退出。要求分别采用从Thread类继承和实现Runnable接口两种方式来实现程序（即编写两个程序）。

第三题：
利用多线程实现如下字符串“***”和字符串“###”的交替输出：
***
###
***
###





